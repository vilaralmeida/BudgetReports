# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import pandas as pd
import seaborn as sns
from shiny import reactive
from shiny.express import render, ui

huawei_file = "..\data\huawei\dataprev_CostAnalysis_LinkedAccount_ServiceType_EnterpriseProjects_20250121111903956_0001.csv"
file = "..\data\huawei\dataprev_CostAnalysis_LinkedAccount_ServiceType_EnterpriseProjects_20250121111903956_0001.csv"
# penguins["Service Type"].value_counts().index
dados = pd.read_csv(file)

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    hw_service_type = list(dados["Service Type"].value_counts().index)
    ui.input_checkbox_group(
        "hw_service_type", "Huawei Service Type:",
        hw_service_type, selected = hw_service_type
    )



    @reactive.calc
    def filtered_huawei():
        huawei = dados[dados["Service Type"].isin(input.hw_service_type())]
        huawei = dados.drop(columns=["Linked Account","Enterprise Projects","Total"])
        huawei = huawei.drop(0)
        huawei = huawei.transpose()
        huawei = huawei.set_axis(huawei.iloc[0], axis=1)
        huawei.drop(index=huawei.index[0], axis=0, inplace=True)
        return huawei

    # ========================================================================

    ui.input_select("dist", "Distribution:", choices=["kde", "hist"])
    ui.input_checkbox("rug", "Show rug marks", value = False)

    # ========================================================================

    @render.plot
    def depth():
        return sns.displot(
            filtered_huawei(), x = "Service Type",
            hue = "hw_service_type", kind = input.dist(),
            fill = True, rug=input.rug()
        )

    # ========================================================================

    @render.data_frame
    def dataview():
        return render.DataGrid(filtered_huawei())

    # ========================================================================



    return None


_static_assets = ["relatorios_files","src\\images\\periquito.jpg","src\\images\\periquito.jpg","src\\relatorios_files\\libs\\quarto-html\\tippy.css","src\\relatorios_files\\libs\\quarto-html\\quarto-syntax-highlighting-2486e1f0a3ee9ee1fc393803a1361cdb.css","src\\relatorios_files\\libs\\bootstrap\\bootstrap-icons.css","src\\relatorios_files\\libs\\bootstrap\\bootstrap-a9602187df57603a0604ee5b90d4421e.min.css","src\\relatorios_files\\libs\\quarto-dashboard\\datatables.min.css","src\\relatorios_files\\libs\\clipboard\\clipboard.min.js","src\\relatorios_files\\libs\\quarto-html\\quarto.js","src\\relatorios_files\\libs\\quarto-html\\popper.min.js","src\\relatorios_files\\libs\\quarto-html\\tippy.umd.min.js","src\\relatorios_files\\libs\\quarto-html\\anchor.min.js","src\\relatorios_files\\libs\\bootstrap\\bootstrap.min.js","src\\relatorios_files\\libs\\quarto-dashboard\\quarto-dashboard.js","src\\relatorios_files\\libs\\quarto-dashboard\\stickythead.js","src\\relatorios_files\\libs\\quarto-dashboard\\datatables.min.js","src\\relatorios_files\\libs\\quarto-dashboard\\pdfmake.min.js","src\\relatorios_files\\libs\\quarto-dashboard\\vfs_fonts.js","src\\relatorios_files\\libs\\quarto-dashboard\\web-components.js","src\\relatorios_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "relatorios.html",
    server,
    static_assets=_static_assets,
)
